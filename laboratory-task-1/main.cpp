#include <iostream>
#include <iomanip>
#include <cmath>
using std::cout;
using std::cin;

//–í–∞—Ä–∏–∞–Ω—Ç 8
/*
–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–≥–æ
–∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –µ–µ –≤ –≤–∏–¥–µ —Ä—è–¥–∞ –¢–µ–π–ª–æ—Ä–∞.
–í—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥–Ω–æ–µ —Å–ª–∞–≥–∞–µ–º–æ–µ –æ–∫–∞–∂–µ—Ç—Å—è –ø–æ –º–æ–¥—É–ª—é
–º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ ùëíùëùùë†ùëñùëôùëúùëõ, –≥–¥–µ 0 < ùëíùëùùë†ùëñùëôùëúùëõ < 10‚àíùëò , ùëò ‚Äì –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ
—á–∏—Å–ª–æ, ùëò > 1. –°—Ä–∞–≤–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º —Å
–ø–æ–º–æ—â—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π. –ó–Ω–∞—á–µ–Ω–∏–µ ùë• –∏ ùëò –≤–≤–µ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.
*/
//8. ‚àö(1 + ùë•)

int main()
{
    try
    {
        double x;
        cout << "Input x that belongs to the interval (-1; 1): ";
        cin >> x;
        if (!(x > -1 && x < 1))
        {
            throw "Wrong x";
        }

        int64_t k;
        cout << "Input natural k: ";
        cin >> k;
        if (!(k > 1))
        {
            throw "Wrong k";
        }

        long double eps;
        cout << "Input epsilon: ";
        cin >> eps;
        if (!(0 < eps && eps < pow(10,-k)))
        {
            throw "Wrong epsilon";
        }

        long double term = x / 2.0;
        long double result = 1;
        size_t i = 1;
        while (fabs(term) > eps)
        {
            result += term;
            term *= -x * i / (i+3);
            i += 2; 
        }
        
        cout << "Taylor series result: " << std::fixed << std::setprecision(k) << result << '\n';
        cout << "Standart function result: " << sqrt(1.0 + x);
    }
    catch(const char* e)
    {
        cout << e << '\n';
    }
        
    return 0;
}
